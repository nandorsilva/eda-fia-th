version: '2.4'
services:
  grafana:
    image: "grafana/grafana:${GRAFANA_VERSION}"
    ports:
     - "3000:3000"
    environment:
      GF_PATHS_DATA : /var/lib/grafana
      GF_SECURITY_ADMIN_PASSWORD : kafka
    volumes:
     - ./grafana/provisioning:/etc/grafana/provisioning     
     - grafana-data:/var/lib/grafana
    container_name: grafana
    depends_on:
      - prometheus
      - tempo
      - loki    
    networks:
      otel:
    

  prometheus:
    image: "prom/prometheus:${PROMETHEUS_VERSION}"
    ports:
     - "9090:9090"
    volumes:
     - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
     - prometheus:/prometheus
    command: "--config.file=/etc/prometheus/prometheus.yml"
    container_name: prometheus
    networks:
      otel:

  tempo:
    
    image: grafana/tempo:2.0.1
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:   
      - /etc/localtime:/etc/localtime:ro   
      - ./etc/tempo/tempo.yml:/etc/tempo.yaml    
      - tempo:/tmp/tempo
    restart: unless-stopped
    ports:
      - 3200:3200  # tempo
      - 4007:4317  # otlp grpc
    depends_on:
      - otel-collector
    networks:
      otel:

  loki:

    image: grafana/loki:2.8.0
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - /etc/localtime:/etc/localtime:ro      
      - ./etc/loki/loki.yml:/etc/loki/local-config.yaml
      - loki:/data/loki
    restart: unless-stopped
    ports:
      - 3100:3100
    networks:
      otel:

  otel-collector:
    
    container_name: otel
    hostname: otel
    image: otel/opentelemetry-collector-contrib:0.75.0
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel/otel.yml:/etc/otel-collector-config.yaml
    restart: unless-stopped
    ports:
      - 8888:8888   # Prometheus metrics exposed by the collector
      - 8889:8889   # Prometheus exporter metrics
      - 4317:4317   # OTLP gRPC receiver
      - 9200:55679  # zpages
      - 13133:13133 # Health check
    networks:
      otel:
  
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
    networks:
      otel:

  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
     - "2181:2181"
    container_name: zookeeper
    networks:
      otel:

  kafka-broker:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9991:9991"

    container_name: kafka-broker
    environment:
      KAFKA_BROKER_ID: 101
      KAFKA_JMX_PORT: 9991
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_HEAP_OPTS: ${KAFKA_BROKER_HEAP_OPTS}
    mem_limit: ${KAFKA_BROKER_MEM_LIMIT}
    networks:
      otel:


  akhq:
    image: tchiotludo/akhq:${AKHQ_VERSION}
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka-broker:29092"       
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - "8080:8080"
    depends_on:
      - kafka-broker    
      - connect
    networks:
      otel:

  kafka-net:
      image: fernandos/kafka-net:v0
      container_name: kafkanet    
      environment:
          ASPNETCORE_ENVIRONMENT: Development
      depends_on:
          - kafka-broker       
      ports:
        - "5000:80"
      networks:
        otel:

  mongo:
    image: mongo:${MONGODB_MICROCKS_VERSION}
    container_name: microcks-db
    volumes:
      - "~/tmp/microcks-data:/data/db"

  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_MICROCKS_VERSION}
    container_name: microcks-sso
    ports:
      - "18080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_HOSTNAME_ADMIN_URL: "http://localhost:18080"
      KC_HOSTNAME_URL: "http://localhost:18080"
    volumes:
      - "./keycloak-realm/microcks-realm-sample.json:/opt/keycloak/data/import/microcks-realm.json"
    command:
      - start-dev --import-realm
    networks:
      otel:

  postman:
    image: quay.io/microcks/microcks-postman-runtime:${POSTMAN_MICROCKS_VERSION}
    container_name: microcks-postman-runtime
    networks:
      otel:

  app:
    depends_on:
      - mongo
      - keycloak
      - postman
      - kafka-broker
    image: quay.io/microcks/microcks:${MICROCKS_VERSION}
    container_name: microcks
    volumes:
      - "./config:/deployments/config"
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017
      - SPRING_DATA_MONGODB_DATABASE=microcks
      - POSTMAN_RUNNER_URL=http://postman:3000
      - TEST_CALLBACK_URL=http://microcks:8080
      - SERVICES_UPDATE_INTERVAL=0 0 0/2 * * *
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_PUBLIC_URL=http://localhost:18080
      - JAVA_OPTIONS=-Dspring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:18080/realms/microcks -Dspring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/microcks/protocol/openid-connect/certs
      - ASYNC_MINION_URL=http://microcks-async-minion:8081
      - KAFKA_BOOTSTRAP_SERVER=kafka-broker:29092
    networks:
      otel:

  async-minion:
    depends_on:
      - app
      - kafka-broker
    ports:
      - "8081:8081"
    image: quay.io/microcks/microcks-async-minion:${MICROCKS_AYNC_VERSION}
    container_name: microcks-async-minion
    restart: on-failure
    volumes:
      - "./config:/deployments/config"
    environment:
      - QUARKUS_PROFILE=docker-compose
    networks:
      otel:

  connect:
        image: fernandos/kafka-connet-debezium-lab:v213
        container_name: kafkaConect
        ports:
        - 8083:8083
        depends_on:      
         - kafka-broker      
        environment:
        - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
        - KAFKA_CONNECT_BOOTSTRAP_SERVERS=kafka-broker:29092
        - |
            KAFKA_CONNECT_CONFIGURATION=
            key.converter=org.apache.kafka.connect.json.JsonConverter
            value.converter=org.apache.kafka.connect.json.JsonConverter
            key.converter.schemas.enable=false
            value.converter.schemas.enable=false
            group.id=connect
            offset.storage.topic=connect-offsets
            offset.storage.replication.factor=1
            config.storage.topic=connect-configs
            config.storage.replication.factor=1
            status.storage.topic=connect-status
            status.storage.replication.factor=1  
            CONNECT_REST_ADVERTISED_HOST_NAME: 'connect' 
            producer.interceptor.classes=io.debezium.tracing.DebeziumTracingProducerInterceptor
        - OTEL_SERVICE_NAME=kafka-connect
        - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
        - OTEL_TRACES_SAMPLER=always_on
        - OTEL_TRACES_EXPORTER=otlp
        - OTEL_METRICS_EXPORTER=none
        - STRIMZI_TRACING=opentelemetry   
        command: /opt/kafka/kafka_connect_run.sh
        networks:
          otel:

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    ports:
     - 1433:1433
    environment:
     - ACCEPT_EULA=Y
     - MSSQL_PID=Standard
     - SA_PASSWORD=Password!
     - MSSQL_AGENT_ENABLED=true
    stdin_open: true
    volumes:
      - /sql/init.sql:/opt/sql_scripts/init.sql
    networks:
      otel:

  postgres:
    image: quay.io/debezium/example-postgres:2.1
    container_name: postgres
    ports:
     - 5432:5432
    environment:
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=postgres
    networks:
      otel:

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: lab-pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: postgres    
    ports:
      - "5433:80"
    depends_on:
      - postgres    
    networks:
      otel:

  mongo-connect:
    image: mongo:3.4.23
    container_name: mongo-connect
    volumes:
      - "~/tmp/mongodbdata:/data/db"
    networks:
      otel:

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:${KSQLDB_VER}
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka-broker        
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka-broker:29092      
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"        
    volumes:
      - ./scripts:/scripts
    networks:
      otel:

  minio:
    image:  quay.io/minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ACCESS_KEY: cursolab
      MINIO_SECRET_KEY: cursolab
    command: server --console-address ":9001" /data
    networks:
      otel:

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:${KSQLDB_VER}
    container_name: ksqldb-cli
    depends_on:
      - kafka-broker
      - ksqldb-server
    volumes:
      - ./scripts:/scripts
    entrypoint: /bin/sh
    tty: true
    networks:
      otel:

networks:
  otel:

volumes:
  minio_storage: {}
  loki:
  prometheus:
  tempo:
  grafana-data:
